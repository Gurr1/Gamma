// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<GammaToast/> Shallow render of <GammaToast/> 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <GammaToast />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <Styled(WithStyles(Snackbar))
        ContentProps={
                Object {
                        "aria-describedby": "message-id",
                      }
        }
        action={
                <Styled(Component)
                        color="secondary"
                        hide={false}
                        onClick={[Function]}
                        size="small"
                />
        }
        anchorOrigin={
                Object {
                        "horizontal": "left",
                        "vertical": "bottom",
                      }
        }
        autoHideDuration={0}
        message={
                <span
                        id="message-id"
                />
        }
        onClose={[Function]}
        onExited={[Function]}
        open={false}
/>,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "ContentProps": Object {
          "aria-describedby": "message-id",
        },
        "action": <Styled(Component)
          color="secondary"
          hide={false}
          onClick={[Function]}
          size="small"
/>,
        "anchorOrigin": Object {
          "horizontal": "left",
          "vertical": "bottom",
        },
        "autoHideDuration": 0,
        "message": <span
          id="message-id"
/>,
        "onClose": [Function],
        "onExited": [Function],
        "open": false,
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <Styled(WithStyles(Snackbar))
          ContentProps={
                    Object {
                              "aria-describedby": "message-id",
                            }
          }
          action={
                    <Styled(Component)
                              color="secondary"
                              hide={false}
                              onClick={[Function]}
                              size="small"
                    />
          }
          anchorOrigin={
                    Object {
                              "horizontal": "left",
                              "vertical": "bottom",
                            }
          }
          autoHideDuration={0}
          message={
                    <span
                              id="message-id"
                    />
          }
          onClose={[Function]}
          onExited={[Function]}
          open={false}
/>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "ContentProps": Object {
            "aria-describedby": "message-id",
          },
          "action": <Styled(Component)
            color="secondary"
            hide={false}
            onClick={[Function]}
            size="small"
/>,
          "anchorOrigin": Object {
            "horizontal": "left",
            "vertical": "bottom",
          },
          "autoHideDuration": 0,
          "message": <span
            id="message-id"
/>,
          "onClose": [Function],
          "onExited": [Function],
          "open": false,
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
